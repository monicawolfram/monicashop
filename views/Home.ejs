<!DOCTYPE html>
<html lang="sw">
<head>
  <meta charset="UTF-8">
  <title>Shop Dashboard</title>
  <style>
    body { font-family: Arial, sans-serif; background: #f4f6f9; margin: 0; padding: 0; }
    header { background: #2c3e50; color: white; padding: 15px; text-align: center; }
    .container { display: grid; grid-template-columns: repeat(4, 1fr); gap: 15px; padding: 20px; }
    .card { background: white; padding: 15px; border-radius: 8px; box-shadow: 0 2px 6px rgba(0,0,0,0.1); }
    .card h3 { margin: 0 0 10px; font-size: 16px; color: #333; }
    .card p { font-size: 14px; color: #555; }
    .table-container { grid-column: span 4; background: white; padding: 15px; border-radius: 8px; box-shadow: 0 2px 6px rgba(0,0,0,0.1); margin-bottom: 20px; }
    table { width: 100%; border-collapse: collapse; margin-top: 10px; }
    table th, table td { border: 1px solid #ddd; padding: 8px; text-align: center; }
    table th { background: #3498db; color: white; }
    canvas { margin-top: 15px; width: 100% !important; max-height: 300px; }
  </style>
</head>
<body>

<header>
  <h1>ðŸ“Š Shop Dashboard</h1>
</header>

<div class="container" id="dashboardCards">
  <!-- Cards will be generated dynamically -->
</div>

<div class="table-container">
  <h3>ðŸ“¦ Orodha ya Bidhaa Zote</h3>
  <table id="productsTable">
    <tr>
      <th>image</th>
      <th>Jina la Bidhaa</th>
      <th>Idadi</th>
      <th>Bei ya Manunuzi</th>
      <th>Bei ya Mauzo</th>
      <th>Status</th>
    </tr>
    <!-- Rows will be added dynamically -->
  </table>
</div>

<div class="table-container">
  <h3>ðŸ“ˆ Grafu ya Mauzo na Bidhaa</h3>
  <canvas id="salesChart"></canvas>
  <canvas id="productsChart"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
async function loadDashboard() {
  try {
    // Fetch products
    const resProducts = await fetch('/products'); 
    const dataProducts = await resProducts.json();
    const products = dataProducts.products || [];

    // Fetch sales
    const resSales = await fetch('/sales'); 
    const dataSales = await resSales.json();
    const sales = (dataSales.success && dataSales.sales) ? dataSales.sales : [];

    // ------------------- SALES AGGREGATION -------------------
    const now = new Date();
    const salesTotals = { leo: 0, wiki: 0, mwezi: 0, mwaka: 0 };

    sales.forEach(s => {
      if (!s.quantity) return;
      const d = new Date(s.date);
      const qty = Number(s.quantity);

      // Daily
      if(d.toDateString() === now.toDateString()) salesTotals.leo += qty;
      // Weekly
      if(Math.floor((now - d)/(1000*60*60*24*7)) === 0) salesTotals.wiki += qty;
      // Monthly
      if(d.getFullYear() === now.getFullYear() && d.getMonth() === now.getMonth()) salesTotals.mwezi += qty;
      // Yearly
      if(d.getFullYear() === now.getFullYear()) salesTotals.mwaka += qty;
    });

    // ------------------- CARDS -------------------
    const container = document.getElementById('dashboardCards');
    container.innerHTML = '';

    // Sales Cards
    ['Leo','Wiki','Mwezi','Mwaka'].forEach(period => {
      const div = document.createElement('div');
      div.className = 'card';
      div.innerHTML = `<h3>Mauzo ya ${period}</h3><p>${salesTotals[period.toLowerCase()].toLocaleString()} units</p>`;
      container.appendChild(div);
    });

    // Profit Cards (optional, example)
    const profitTotals = { leo: 0, wiki: 0, mwezi: 0, mwaka: 0 };
    // Calculate profit: (sell_price - cost_price) * quantity
    sales.forEach(s => {
      const product = products.find(p => p.name === s.fullname); // Or match by product ID if exists
      if (!product || !s.quantity) return;
      const d = new Date(s.date);
      const profit = (product.sell_price - product.cost_price) * Number(s.quantity);

      if(d.toDateString() === now.toDateString()) profitTotals.leo += profit;
      if(Math.floor((now - d)/(1000*60*60*24*7)) === 0) profitTotals.wiki += profit;
      if(d.getFullYear() === now.getFullYear() && d.getMonth() === now.getMonth()) profitTotals.mwezi += profit;
      if(d.getFullYear() === now.getFullYear()) profitTotals.mwaka += profit;
    });

    ['Leo','Wiki','Mwezi','Mwaka'].forEach(period => {
      const div = document.createElement('div');
      div.className = 'card';
      div.innerHTML = `<h3>Faida/Hasara (${period})</h3><p>TZS ${profitTotals[period.toLowerCase()].toLocaleString()}</p>`;
      container.appendChild(div);
    });

    // ------------------- STOCK CARDS -------------------
    const lowStock = products.filter(p => p.stock <= (p.min_stock || 0)).map(p => p.name).join(', ') || 'Hakuna';
    const important = products.filter(p => p.is_important == 1).map(p => p.name).join(', ') || 'Hakuna';
    const nonImportant = products.filter(p => p.is_important == 0).map(p => p.name).join(', ') || 'Hakuna';
    const totalQty = products.reduce((sum, p) => sum + (p.stock || 0), 0);

    const stockCards = [
      { title: 'Bidhaa Zilizopungua', value: lowStock },
      { title: 'Bidhaa Muhimu', value: important },
      { title: 'Bidhaa Zisizo Muhimu', value: nonImportant },
      { title: 'Idadi ya Bidhaa', value: `Jumla: ${totalQty} pcs` }
    ];

    stockCards.forEach(card => {
      const div = document.createElement('div');
      div.className = 'card';
      div.innerHTML = `<h3>${card.title}</h3><p>${card.value}</p>`;
      container.appendChild(div);
    });

    // ------------------- PRODUCTS TABLE -------------------
    const table = document.getElementById('productsTable');
    table.querySelectorAll('tr:not(:first-child)').forEach(r => r.remove());
    products.forEach(p => {
      const status = p.stock <= (p.min_stock || 0) ? 'Pungufu' : 'Muhimu';
      const row = document.createElement('tr');
      row.innerHTML = `
       <td>
         <img src="${p.image || 'https://via.placeholder.com/50'}" 
              alt="${p.name}" 
              width="50" 
              height="50" 
              style="border-radius:50%; object-fit:cover;"/>
       </td>
       <td>${p.name}</td>
       <td>${p.stock}</td>
       <td>TZS ${parseFloat(p.cost_price).toLocaleString()}</td>
       <td>TZS ${parseFloat(p.sell_price).toLocaleString()}</td>
       <td>${status}</td>
      `;
      table.appendChild(row);
    });

    // ------------------- CHARTS -------------------
    if(document.getElementById('salesChart')){
      new Chart(document.getElementById('salesChart'), {
        type: 'line',
        data: {
          labels: ['Leo','Wiki','Mwezi','Mwaka'],
          datasets: [{
            label: 'Mauzo (Units)',
            data: ['leo','wiki','mwezi','mwaka'].map(p => salesTotals[p]),
            borderColor: 'blue',
            fill: false
          }]
        }
      });
    }

    if(document.getElementById('productsChart')){
      new Chart(document.getElementById('productsChart'), {
        type: 'bar',
        data: {
          labels: products.map(p => p.name),
          datasets: [{
            label: 'Idadi ya Bidhaa',
            data: products.map(p => p.stock),
            backgroundColor: ['red','green','orange','gray','purple']
          }]
        }
      });
    }

  } catch (err) {
    console.error('Error loading dashboard:', err);
  }
}

// Load dashboard automatically
loadDashboard();
</script>




</body>
</html>
