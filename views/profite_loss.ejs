<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<title>Profit & Loss Dashboard</title>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
:root{--bg:#f4f6f9;--card:#fff;--accent:#2c3e50;--muted:#666;}
body{margin:0;font-family:Inter, Arial, sans-serif;background:var(--bg);color:#222}
header{background:var(--accent);color:#fff;padding:14px 20px;text-align:center}
.wrap{display:flex;gap:20px;padding:18px}
.col{flex:1;min-width:300px}
.card{background:var(--card);padding:14px;border-radius:8px;box-shadow:0 2px 8px rgba(0,0,0,0.06);margin-bottom:18px}
h2,h3{margin:6px 0 12px;font-weight:600}
.grid4{display:grid;grid-template-columns:repeat(4,1fr);gap:12px}
.stat{padding:12px;border-radius:8px;background:#f9fbff;text-align:center}
.stat small{display:block;color:var(--muted);font-size:12px}
table{width:100%;border-collapse:collapse;margin-top:12px}
th,td{padding:8px;border-bottom:1px solid #eee;text-align:center;font-size:14px}
th{background:#f7f9fc}
.btn{padding:8px 12px;border-radius:6px;background:#2d89ff;color:#fff;border:none;cursor:pointer}
.btn.secondary{background:#6c757d}
.muted{color:var(--muted);font-size:13px}
input, select{padding:6px 8px;margin:4px 2px;border-radius:4px;border:1px solid #ccc;}
form{display:flex;flex-wrap:wrap;gap:8px;align-items:center}
@media(max-width:900px){.grid4{grid-template-columns:repeat(2,1fr)}.wrap{flex-direction:column}}
</style>
</head>
<body>

<header>
  <h1>Profit & Loss Dashboard</h1>
  <!-- Google Translate Widget -->
  <div id="google_translate_element" style="margin-top:8px;"></div>
</header>

<div style="padding:18px;">

  <!-- Summary Stats -->
  <div class="grid4">
    <div class="stat">
      <h2 id="dailyProfit">0</h2>
      <small>Daily Profit/Loss</small>
    </div>
    <div class="stat">
      <h2 id="weeklyProfit">0</h2>
      <small>Weekly Profit/Loss</small>
    </div>
    <div class="stat">
      <h2 id="monthlyProfit">0</h2>
      <small>Monthly Profit/Loss</small>
    </div>
    <div class="stat">
      <h2 id="yearlyProfit">0</h2>
      <small>Yearly Profit/Loss</small>
    </div>
  </div>

  <!-- Add Sale Form -->
  <div class="card">
    <h3>Add Sale</h3>
    <form id="addSaleForm">
      <input type="text" name="fullname" placeholder=" Name" required>
      <input type="text" name="product_name" placeholder="Product Name" required>
      <input type="number" name="quantity" id="quantity" placeholder="Quantity" required>
      <input type="number" name="sell_price" id="sell_price" placeholder="Sell Price" required>
      <input type="number" name="total_amount" id="total_amount" placeholder="Total Amount" readonly>
      <input type="number" name="cost_price" placeholder="Cost Price" required>
      <input type="date" name="date" required>
      <button class="btn" type="submit">Add Sale</button>
    </form>
  </div>

  <!-- Add Expense Form -->
  <div class="card">
    <h3>Add Expense</h3>
    <form id="addExpenseForm">
      <input type="text" name="description" placeholder="Expense Description" required>
      <input type="number" name="amount" placeholder="Amount" required>
      <input type="date" name="date" required>
      <button class="btn secondary" type="submit">Add Expense</button>
    </form>
  </div>

  <!-- Chart -->
  <div class="card">
    <h3>Sales vs Expenses vs Profit</h3>
    <canvas id="plChart" height="120"></canvas>
  </div>

  <!-- Transactions Table -->
  <div class="card">
    <h3>Transactions</h3>
    <table>
      <thead>
        <tr>
          <th>Date</th>
          <th>Customer / Expense</th>
          <th>Product / Description</th>
          <th>Quantity</th>
          <th>Sales</th>
          <th>Expenses</th>
          <th>Profit</th>
        </tr>
      </thead>
      <tbody id="transactionsBody"></tbody>
    </table>
  </div>

</div>

<script>
// Google Translate
function googleTranslateElementInit() {
  new google.translate.TranslateElement({pageLanguage: 'en'}, 'google_translate_element');
}
</script>
<script src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>

<script>
const quantityInput = document.getElementById('quantity');
const sellPriceInput = document.getElementById('sell_price');
const totalAmountInput = document.getElementById('total_amount');

// Auto-calc total amount for sales
function updateTotalAmount() {
  const qty = Number(quantityInput.value) || 0;
  const price = Number(sellPriceInput.value) || 0;
  totalAmountInput.value = (qty * price).toFixed(2);
}
quantityInput.addEventListener('input', updateTotalAmount);
sellPriceInput.addEventListener('input', updateTotalAmount);

// Fetch all sales and expenses
async function fetchData() {
  try {
    const res = await fetch("/profit-loss");
    const json = await res.json();
    if (!json.success) throw new Error("Failed to fetch data");
    return json.data || { sales: [], expenses: [] };
  } catch (err) {
    console.error(err);
    return { sales: [], expenses: [] };
  }
}

// Combine sales and expenses into transactions
function aggregateData({ sales, expenses }) {
  const transactions = [];

  // Sales
  sales.forEach(r => {
    const qty = Number(r.quantity_product) || 0;
    const saleAmount = (r.sell_price || 0) * qty;
    const expenseAmount = (r.cost_price || 0) * qty;
    transactions.push({
      type: 'Sale',
      date: r.summary_date,
      fullname: r.fullname,
      product_name: r.product_name,
      quantity: qty,
      sales: saleAmount,
      expenses: expenseAmount,
      profit: saleAmount - expenseAmount
    });
  });

  // Expenses
  expenses.forEach(r => {
    const amt = Number(r.amount) || 0;
    transactions.push({
      type: 'Expense',
      date: r.date,
      fullname: r.description,
      product_name: '-',
      quantity: 0,
      sales: 0,
      expenses: amt,
      profit: -amt
    });
  });

  // Sort by date ascending
  return transactions.sort((a, b) => new Date(a.date) - new Date(b.date));
}

// Update dashboard, table, chart
async function updatePL() {
  const rawData = await fetchData();
  const transactions = aggregateData(rawData);

  const sumProfit = arr => arr.reduce((t, v) => t + v.profit, 0);

  // Totals
  const todayStr = new Date().toISOString().slice(0,10);
  const daily = transactions.filter(t => t.date.slice(0,10) === todayStr);
  const week = transactions.slice(-7);
  const month = transactions.slice(-30);
  const year = transactions;

  document.getElementById("dailyProfit").textContent = sumProfit(daily).toFixed(2);
  document.getElementById("weeklyProfit").textContent = sumProfit(week).toFixed(2);
  document.getElementById("monthlyProfit").textContent = sumProfit(month).toFixed(2);
  document.getElementById("yearlyProfit").textContent = sumProfit(year).toFixed(2);

  // Populate transactions table
  const tbody = document.getElementById("transactionsBody");
  tbody.innerHTML = "";
  transactions.forEach(t => {
    tbody.innerHTML += `
      <tr>
        <td>${t.date || "-"}</td>
        <td>${t.fullname || "-"}</td>
        <td>${t.product_name || "-"}</td>
        <td>${t.quantity != null ? t.quantity : "-"}</td>
        <td>${t.sales != null ? t.sales.toFixed(2) : "0.00"}</td>
        <td>${t.expenses != null ? t.expenses.toFixed(2) : "0.00"}</td>
        <td style="color:${t.profit >= 0 ? "green":"red"}">${t.profit != null ? t.profit.toFixed(2) : "0.00"}</td>
        <td>${t.type}</td>
      </tr>
    `;
  });

  // Chart
  new Chart(document.getElementById("plChart"), {
    type: "line",
    data: {
      labels: transactions.map(t => t.date),
      datasets: [
        { label: "Sales", data: transactions.map(t => t.sales), borderColor: "blue", fill: false },
        { label: "Expenses", data: transactions.map(t => t.expenses), borderColor: "red", fill: false },
        { label: "Profit", data: transactions.map(t => t.profit), borderColor: "green", fill: false }
      ]
    }
  });
}

// Submit Sale
document.getElementById('addSaleForm').addEventListener('submit', async e => {
  e.preventDefault();
  const formData = Object.fromEntries(new FormData(e.target).entries());

  formData.quantity_product = Number(formData.quantity || formData.quantity_product);
  delete formData.quantity;

  formData.fullname = formData.fullname?.trim();
  formData.product_name = formData.product_name?.trim();

  if (!formData.fullname || !formData.product_name || !formData.quantity_product || isNaN(formData.quantity_product)) {
    alert("Tafadhali jaza fullname, product_name na quantity sahihi");
    return;
  }

  try {
    const res = await fetch('/add-sale', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(formData)
    });
    const json = await res.json();
    if(json.success){
      e.target.reset();
      totalAmountInput.value = "";
      await updatePL();
      alert("Sale added successfully!");
    } else {
      alert(json.message || "Failed to add sale");
    }
  } catch(err){
    console.error("Error submitting sale:", err);
    alert("Server error while adding sale");
  }
});

// Submit Expense
document.getElementById('addExpenseForm').addEventListener('submit', async e => {
  e.preventDefault();
  const formData = Object.fromEntries(new FormData(e.target).entries());
  formData.amount = Number(formData.amount);

  if(!formData.description || !formData.amount || isNaN(formData.amount)){
    alert("Tafadhali jaza description na amount sahihi");
    return;
  }

try {
    const res = await fetch('/add-expense', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify(formData)
    });

    // Parse JSON
    const json = await res.json();

    if (res.ok && json.success) {
        e.target.reset();
        await updatePL();
        alert(json.message || "Expense added successfully!");
    } else {
        alert(json.message || "Failed to add expense");
    }
} catch(err) {
    console.error(err);
    alert("Server error while adding expense");
}
});


// Initial load
updatePL();
</script>






</body>
</html>
